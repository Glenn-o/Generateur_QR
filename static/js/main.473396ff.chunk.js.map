{"version":3,"sources":["logo.svg","form/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Generateur_QR","state","userInput","event","this","setState","target","value","preventDefault","xhr","XMLHttpRequest","withCredentials","input","addEventListener","readyState","DONE","document","getElementById","src","responseText","style","display","innerHTML","transition","open","setRequestHeader","send","className","alt","id","type","placeholder","onChange","bind","onClick","QR_generateur","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,0ICwD5BC,E,kDArDX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAW,IAHN,E,qDAMJC,GACLC,KAAKC,SAAS,CACVH,UAAWC,EAAMG,OAAOC,U,oCAGlBJ,GACVA,EAAMK,iBACN,IACIC,EAAM,IAAIC,eACdD,EAAIE,iBAAkB,EACtB,IAAIC,EAAQR,KAAKH,MAAMC,UAEvBO,EAAII,iBAAiB,oBAAoB,WACnCT,KAAKU,aAAeV,KAAKW,OACd,KAAVH,GACCI,SAASC,eAAe,WAAWC,IAAMd,KAAKe,aAC9CH,SAASC,eAAe,WAAWG,MAAMC,QAAU,OACnDL,SAASC,eAAe,eAAeK,UAAY,KAGnDN,SAASC,eAAe,eAAeK,UAAY,qEACnDN,SAASC,eAAe,eAAeG,MAAMG,WAAa,aAIlEd,EAAIe,KAAK,MAAO,uNAAwNpB,KAAKH,MAAMC,WACnPO,EAAIgB,iBAAiB,kBAAmB,qCACxChB,EAAIgB,iBAAiB,iBAAkB,sDAEvChB,EAAIiB,KAtBO,Q,+BA2BX,OACI,yBAAKC,UAAU,QACX,yBAAKT,IAAI,GAAGU,IAAI,UAAUC,GAAG,YAC7B,0BAAMF,UAAU,kBACZ,2BAAOE,GAAG,QAAQC,KAAK,OAAOvB,MAAOH,KAAKH,MAAMC,UAAW6B,YAAY,uCAAuCC,SAAU5B,KAAK4B,SAASC,KAAK7B,QAC3I,4BAAQ8B,QAAS9B,KAAK+B,cAAcF,KAAK7B,MAAOyB,GAAG,UAAnD,kBAEJ,uBAAGA,GAAG,qB,GAhDMO,aCYbC,MATf,WACE,OACE,yBAAKV,UAAU,QACb,2DACA,kBAAC,EAAD,QCGcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.473396ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass Generateur_QR extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            userInput: '',\r\n        };\r\n    }\r\n    onChange(event){\r\n        this.setState({\r\n            userInput: event.target.value\r\n        })\r\n    }\r\n    QR_generateur(event) {\r\n        event.preventDefault();\r\n        var data = null;\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.withCredentials = true;\r\n        var input = this.state.userInput;\r\n        \r\n        xhr.addEventListener(\"readystatechange\", function () {\r\n          if (this.readyState === this.DONE) {\r\n            if(input !== ''){\r\n                document.getElementById('qr_code').src = this.responseText;\r\n                document.getElementById('qr_code').style.display = \"flex\";\r\n                document.getElementById('instruction').innerHTML = \"\";\r\n            }\r\n            else{\r\n                document.getElementById('instruction').innerHTML = \"Veuillez remplir le champ ci-dessus pour générer un QR code.\"\r\n                document.getElementById('instruction').style.transition = \"200ms\"\r\n            }\r\n          }\r\n        });\r\n        xhr.open(\"GET\", \"https://pierre2106j-qrcode.p.rapidapi.com/api?backcolor=ffffff&pixel=10%20to%20100&ecl=L%20%257C%20M%257C%20Q%20%257C%20H&forecolor=000000&type=text%20%257C%20url%20%257C%20tel%20%257C%20sms%20%257C%20email&text=\"+ this.state.userInput + \"\");\r\n        xhr.setRequestHeader(\"x-rapidapi-host\", \"pierre2106j-qrcode.p.rapidapi.com\");\r\n        xhr.setRequestHeader(\"x-rapidapi-key\", \"44b462bf97mshf5b71d247e27b75p1fbdb5jsn8b5370399f32\");\r\n        \r\n        xhr.send(data);\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"form\">\r\n                <img src=\"\" alt=\"qr_code\" id=\"qr_code\"/>\r\n                <form className=\"container_form\">\r\n                    <input id=\"input\" type=\"text\" value={this.state.userInput} placeholder=\"Renseigner une URL, un email, etc...\" onChange={this.onChange.bind(this)}/>\r\n                    <button onClick={this.QR_generateur.bind(this)} id=\"button\">Générer</button>\r\n                </form>\r\n                <p id=\"instruction\"></p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Generateur_QR;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Generateur_QR from './form/Form.js';\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <h1>Générateur de QR code</h1>\n      <Generateur_QR/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}